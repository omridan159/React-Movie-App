{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = creditsResult.crew.filter(member => member.job === \"Director\");\n      setState({ ...result,\n        actors: creditsResult.cast,\n        directors\n      });\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  useEffect(() => {\n    localStorage.setItem[(movieId, JSON(stringf))];\n  });\n  return [state, loading, error];\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/MOVIE PROJEXT/src/components/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","crew","filter","member","job","actors","cast","localStorage","setItem","JSON","stringf"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAAC,YAAY;AACxCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF,YAAMI,QAAQ,GAAI,GAAEX,OAAQ,SAAQG,OAAQ,YAAWF,OAAQ,EAA/D;AAEA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB;AAEA,YAAMC,eAAe,GAAI,GAAEf,OAAQ,SAAQG,OAAQ,oBAAmBF,OAAQ,EAA9E;AAEA,YAAMe,aAAa,GAAG,MAAM,CAAC,MAAMH,KAAK,CAACE,eAAD,CAAZ,EAA+BD,IAA/B,EAA5B;AAIA,YAAMG,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CACfC,MAAD,IAAYA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAIAhB,MAAAA,QAAQ,CAAC,EACP,GAAGO,MADI;AAEPU,QAAAA,MAAM,EAAEN,aAAa,CAACO,IAFf;AAGPN,QAAAA;AAHO,OAAD,CAAR;AAKD,KApBD,CAoBE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GA5B4B,EA4B1B,CAACJ,OAAD,CA5B0B,CAA7B;AA6BAL,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,YAAY,CAACC,OAAb,EAAqBtB,OAAO,EAAEuB,IAAI,CAACC,OAAD,CAAlC;AACD,GAFQ,CAAT;AAIA,SAAO,CAACvB,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACD,CA3CM","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { API_URL, API_KEY } from \"../../config\";\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setError(false);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n\r\n      const result = await (await fetch(endpoint)).json();\r\n\r\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n\r\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\r\n\r\n\r\n\r\n      const directors = creditsResult.crew.filter(\r\n        (member) => member.job === \"Director\"\r\n      );\r\n\r\n      setState({\r\n        ...result,\r\n        actors: creditsResult.cast,\r\n        directors,\r\n      });\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  }, [movieId]);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem[movieId, JSON(stringf)]\r\n  })\r\n\r\n  return [state, loading, error];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}